<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://rajeshbudhiraja.github.io/</id><title>Rajesh Budhiraja</title><subtitle>iOS Developer.</subtitle> <updated>2022-11-02T04:19:27+08:00</updated> <author> <name>Rajesh Budhiraja</name> <uri>https://rajeshbudhiraja.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://rajeshbudhiraja.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://rajeshbudhiraja.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Rajesh Budhiraja </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Undo Git force</title><link href="https://rajeshbudhiraja.github.io/posts/undo-git-force/" rel="alternate" type="text/html" title="Undo Git force" /><published>2022-11-01T14:30:00+08:00</published> <updated>2022-11-01T14:30:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/undo-git-force/</id> <content src="https://rajeshbudhiraja.github.io/posts/undo-git-force/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="Git" /> <summary> As Developer, it’s our responsiblity to build systems that are loved by our users as well as write code that is loved by our peers. Importance of commit messages in PR review can’t be ignored. Sometimes we squash commits to make it more readable. Squashing will give a new commit with new commit id. This means, we can’t take pull from origin without force pushing our changes. While force pushin... </summary> </entry> <entry><title>Custom Presentation Part 1</title><link href="https://rajeshbudhiraja.github.io/posts/custom-presentation-controller/" rel="alternate" type="text/html" title="Custom Presentation Part 1" /><published>2022-10-30T05:43:00+08:00</published> <updated>2022-11-02T03:24:21+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/custom-presentation-controller/</id> <content src="https://rajeshbudhiraja.github.io/posts/custom-presentation-controller/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="UIPresentationController" /> <summary> UIPresentationController Using UIPresentationController we can use custom transitions and presentation styles. iOS Transitions When we call present(animated:completion:), iOS does three things. Instantiates UIPresentationController. It attaches the presented view controller to the controller which invoked present(animated:completion:) Controller is presented using one of the build in... </summary> </entry> <entry><title>CAEmitterLayer</title><link href="https://rajeshbudhiraja.github.io/posts/caemitterlayer/" rel="alternate" type="text/html" title="CAEmitterLayer" /><published>2022-10-13T05:43:00+08:00</published> <updated>2022-10-13T05:43:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/caemitterlayer/</id> <content src="https://rajeshbudhiraja.github.io/posts/caemitterlayer/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="CAEmitterLayer" /> <category term="CAEmitterCells" /> <summary> CAEmitterLayer CAEmitterLayer is layer that emits, animates and renders a particle system. We can use CAEmitterLayer for creating fireworks, confetti, snow, rain type animations. This high performance particle engile is predecessor of SKEmitterNode. The secret to CAEmitterLayer’s high performance is that it doesn’t track each particle individually. Unlike views or even layers, emitted ... </summary> </entry> <entry><title>Photo Picker</title><link href="https://rajeshbudhiraja.github.io/posts/photo-picker/" rel="alternate" type="text/html" title="Photo Picker" /><published>2022-10-05T04:04:00+08:00</published> <updated>2022-10-05T04:04:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/photo-picker/</id> <content src="https://rajeshbudhiraja.github.io/posts/photo-picker/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="Photo Picker" /> <summary> Photo Picker Let’s consider a view with only one button. On tap of this button we want to open picker which will let us pick photo from gallery. let button: UIButton = { let button: UIButton = .init(type: .roundedRect) button.backgroundColor = .systemBlue button.tintColor = .white button.setTitle("Upload Image", for: .normal) button.translatesAutoresizingMaskIntoConstraint... </summary> </entry> <entry><title>Diffable Data Source</title><link href="https://rajeshbudhiraja.github.io/posts/diffable-data-source/" rel="alternate" type="text/html" title="Diffable Data Source" /><published>2022-10-04T15:28:00+08:00</published> <updated>2022-10-04T15:28:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/diffable-data-source/</id> <content src="https://rajeshbudhiraja.github.io/posts/diffable-data-source/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="UITableView" /> <category term="Diffable Data Source" /> <category term="UIKit" /> <summary> Diffable Data Source Let’s create a simple application and add empty table view. class ViewController: UIViewController { private let tableView: UITableView = { let tableView = UITableView() tableView.translatesAutoresizingMaskIntoConstraints = false return tableView }() override func viewDidLoad() { super.viewDidLoad() self.view.addSubvie... </summary> </entry> </feed>
