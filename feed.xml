<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://rajeshbudhiraja.github.io/</id><title>Rajesh Budhiraja</title><subtitle>iOS Developer.</subtitle> <updated>2022-10-05T06:46:09+08:00</updated> <author> <name>Rajesh Budhiraja</name> <uri>https://rajeshbudhiraja.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://rajeshbudhiraja.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://rajeshbudhiraja.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 Rajesh Budhiraja </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Photo Picker</title><link href="https://rajeshbudhiraja.github.io/posts/photo-picker/" rel="alternate" type="text/html" title="Photo Picker" /><published>2022-10-05T04:04:00+08:00</published> <updated>2022-10-05T04:04:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/photo-picker/</id> <content src="https://rajeshbudhiraja.github.io/posts/photo-picker/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="Photo Picker" /> <summary> Photo Picker Let’s consider a view with only one button. On tap of this button we want to open picker which will let us pick photo from gallery. let button: UIButton = { let button: UIButton = .init(type: .roundedRect) button.backgroundColor = .systemBlue button.tintColor = .white button.setTitle("Upload Image", for: .normal) button.translatesAutoresizingMaskIntoConstraint... </summary> </entry> <entry><title>Diffable Data Source</title><link href="https://rajeshbudhiraja.github.io/posts/diffable-data-source/" rel="alternate" type="text/html" title="Diffable Data Source" /><published>2022-10-04T15:28:00+08:00</published> <updated>2022-10-04T15:28:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/diffable-data-source/</id> <content src="https://rajeshbudhiraja.github.io/posts/diffable-data-source/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="UITableView" /> <category term="Diffable Data Source" /> <category term="UIKit" /> <summary> Diffable Data Source Let’s create a simple application and add empty table view. class ViewController: UIViewController { private let tableView: UITableView = { let tableView = UITableView() tableView.translatesAutoresizingMaskIntoConstraints = false return tableView }() override func viewDidLoad() { super.viewDidLoad() self.view.addSubvie... </summary> </entry> <entry><title>Live Activity</title><link href="https://rajeshbudhiraja.github.io/posts/live-activity/" rel="alternate" type="text/html" title="Live Activity" /><published>2022-09-30T06:10:00+08:00</published> <updated>2022-10-05T03:21:40+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/live-activity/</id> <content src="https://rajeshbudhiraja.github.io/posts/live-activity/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="Swift" /> <category term="Live Activity" /> <summary> In iOS 16, Apple introduced Live Activity. Live activity will display your app’s most recent data on lock screen as well as dynamic island. This will let user consume data just by glancing on screen. This can be used for variety of use cases. From giving updates to customers about location of delivery partner to telling scores of some game. For our case, we will implement a live activity whic... </summary> </entry> <entry><title>.allSatisfy</title><link href="https://rajeshbudhiraja.github.io/posts/allSatisfy/" rel="alternate" type="text/html" title=".allSatisfy" /><published>2022-09-30T06:00:00+08:00</published> <updated>2022-09-30T06:00:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/allSatisfy/</id> <content src="https://rajeshbudhiraja.github.io/posts/allSatisfy/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="Swift" /> <category term=".allSatisfy" /> <summary> This is useful for cases where you need to check if a particular condition applies across collection of objects. For example, school will take children to picnic if all children get permission from parents protocol PicnicPermission { var hasPermission: Bool } struct Student: PicnicPermission { var name: String var hasPermission: Bool } Lets take one array of studens: let arra... </summary> </entry> <entry><title>Lazy Property Observers</title><link href="https://rajeshbudhiraja.github.io/posts/lazy-property-observers/" rel="alternate" type="text/html" title="Lazy Property Observers" /><published>2022-09-30T05:10:00+08:00</published> <updated>2022-09-30T05:10:00+08:00</updated> <id>https://rajeshbudhiraja.github.io/posts/lazy-property-observers/</id> <content src="https://rajeshbudhiraja.github.io/posts/lazy-property-observers/" /> <author> <name>rajeshBudhiraja</name> </author> <category term="Swift" /> <category term="Lazy Property Observers" /> <summary> From Swift 5.3 onwards, property observers can be attached to lazy properties as well. This means, we can observe when a new value was assigned to a given property, even if its value is lazily loaded when first accessed. Consider a case where you want to read a file and as soon as it’s loaded and validated, you want to send it in a email. Let’s do it without observer first. import UIKit clas... </summary> </entry> </feed>
